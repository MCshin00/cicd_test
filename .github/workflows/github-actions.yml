# github repository actions 페이지에 나타날 이름
name: CI/CD using github actions & docker test

# event trigger
# main이나 develop 브랜치에 push가 되었을 때 실행
on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ap-northeast-2                  # set this to your preferred AWS region, e.g. us-west-1
  ECS_SERVICE: demoservice                    # set this to your Amazon ECS service name
  ECS_CLUSTER: demo_cluster                   # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: demotask-revision1 # set this to the path to your Amazon ECS task definition
                                              # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: democontainer               # set this to the name of the container in the
                                              # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

      # JDK setting - github actions에서 사용할 JDK 설정 (프로젝트나 AWS의 java 버전과 달라도 무방)
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 환경별 yml 파일 생성(1) - application.yml
#      - name: make application.yml
#        if: |
#          contains(github.ref, 'main') ||
#          contains(github.ref, 'develop')
#        run: |
#          mkdir ./src/main/resources # resources 폴더 생성
#          cd ./src/main/resources # resources 폴더로 이동
#          touch ./application.yml # application.yml 생성
#          echo "${{ secrets.YML }}" > ./application.yml #github actions에서 설정한 값을 application.yml 파일에 쓰기
#        shell: bash

      # gradle build
      - name: Build with Gradle
        id: build-image
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test

#      # docker build & push to production
#      - name: Docker build & push to prod
#        if: contains(github.ref, 'develop')
#        run: |
#          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
#          docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_USERNAME }}/docker-test-prod .
#          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test-prod

      # docker build & push to develop
      - name: Docker build & push to dev
        if: contains(github.ref, 'main')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/github_action_test .
          docker push ${{ secrets.DOCKER_USERNAME }}/github_action_test
          echo "image=${{ secrets.DOCKER_USERNAME }}/github_action_test" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true